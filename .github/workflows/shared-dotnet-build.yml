name: Shared - Dotnet Build

on:
  workflow_call:
    inputs:
      solution-directory: # service
        required: true
        type: string
        description: Relative to the repository root (e.g., "service")
      solution-name: # Drex.sln
        required: true
        type: string
        description: Should be found with the `solution-directory` (e.g., "Drex.sln")
      test-project-filter-part: # & FullyQualifiedName!~FileShipper
        required: false
        type: string
        description: Partial filter statement to be used with dotnet test (e.g., "& FullyQualifiedName!~FileShipper")
      run-integration-tests:
        required: false
        type: boolean
        default: false
        description: Flag allows run or skip integration tests
      run-e2e-tests:
        required: false
        type: boolean
        default: false
        description: Flag allows run or skip e2e tests
      install-docker-compose:
        required: false
        type: boolean
        default: false
        description: Will install docker-compose before running tests
      check-code-formatting:
        required: false
        type: boolean
        default: false
        description: If true, will fail build if formatting changes are detected (using dotnet format)

env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  NUGET_PACKAGE_PATH: ${{ github.workspace }}/.nuget/packages
  COVERAGE_OUTPUT_LOCATION: service/{0}/TestResults/*/coverage.cobertura.xml
  DOCKER_REPO: ghcr.io/abs-wavesight
  RABBITMQ_IMAGE_TAG: windows-2019

defaults:
  run:
    shell: pwsh

jobs:
  build:
    name: Build & Run Tests

    runs-on: windows-2019

    steps:

      - name: Dump context
        uses: abs-wavesight/cc-platform/actions/dump-context@main

      - uses: actions/checkout@v3
        name: Checkout branch

      - name: Cache nuget packages
        uses: actions/cache@v3
        with:
          path: ${{ env.NUGET_PACKAGE_PATH }}
          key: ${{ runner.OS }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.OS }}-nuget-

      - name: Setup dotnet
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 7.0.x

      - name: Install docker-compose
        if: inputs.install-docker-compose == true
        run: Start-BitsTransfer -Source "https://github.com/docker/compose/releases/download/v2.18.1/docker-compose-windows-x86_64.exe" -Destination C:\Windows\System32\docker-compose.exe

      - name: Confirm docker-compose
        if: inputs.install-docker-compose == true
        run: docker-compose --version

      - name: Nuget - Set Nuget credentials
        working-directory: ./
        run: |
          $AbsNugetUsername = "USERNAME"
          echo "ABS_NUGET_USERNAME=$AbsNugetUsername" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append

          $AbsNugetPassword = "${{ github.TOKEN }}"
          echo "ABS_NUGET_PASSWORD=$AbsNugetPassword" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append

      - name: Restore dependencies
        working-directory: ${{ inputs.solution-directory }}
        run: dotnet restore ${{ inputs.solution-name }} --packages ${{ env.NUGET_PACKAGE_PATH }} --locked-mode

      - name: Build
        working-directory: ${{ inputs.solution-directory }}
        run: dotnet build ${{ inputs.solution-name }} -c Release --no-restore

      - name: Check code formatting
        if: inputs.check-code-formatting == true
        working-directory: ./
        run: dotnet format "${{ inputs.solution-directory }}/${{ inputs.solution-name }}" --verify-no-changes

      - name: Run unit tests
        working-directory: ${{ inputs.solution-directory }}
        run: dotnet test ${{ inputs.solution-name }} -c Release --no-build --filter "FullyQualifiedName!~Integration & FullyQualifiedName!~EndToEnd ${{ inputs.test-project-filter-part }}" --verbosity normal --logger "trx;LogFileName=test-results.trx" --collect:"XPlat Code Coverage" -m:1

      - name: Log in to docker registry
        if: (inputs.run-integration-tests == true || inputs.run-e2e-tests == true)
        run: docker login ghcr.io -u USERNAME --password "${{ secrets.GITHUB_TOKEN }}"
      
      - name: Run integration tests
        if: inputs.run-integration-tests == true
        working-directory: ${{ inputs.solution-directory }}
        run: dotnet test ${{ inputs.solution-name }} -c Release --no-build --filter "FullyQualifiedName~Integration ${{ inputs.test-project-filter-part }}" --verbosity normal --logger "trx;LogFileName=test-results.trx" --collect:"XPlat Code Coverage" -m:1

      - name: Run end-to-end tests
        if: inputs.run-e2e-tests == true
        working-directory: ${{ inputs.solution-directory }}
        run: dotnet test ${{ inputs.solution-name }} -c Release --no-build --filter "FullyQualifiedName~EndToEnd ${{ inputs.test-project-filter-part }}" --verbosity normal --logger "trx;LogFileName=test-results.trx" --collect:"XPlat Code Coverage" -m:1

      - name: Report test results
        uses: dorny/test-reporter@v1
        if: success() || failure()
        with:
          name: Test Results ${{ inputs.test-project-filter-part }}
          path: ./${{ inputs.solution-directory }}/**/TestResults/*.trx
          reporter: dotnet-trx

      - name: Merge coverage results
        working-directory: ${{ inputs.solution-directory }}
        run: |
          dotnet tool install --global dotnet-coverage
          mkdir Coverage/
          dotnet-coverage merge *.cobertura.xml --recursive --output Coverage/cobertura.xml --output-format cobertura 

      - name: Workaround for invalid link paths in coverage report 
        uses: abs-wavesight/cc-platform/actions/fix-code-coverage-paths@main
        with:
          cobertura-xml-path: ${{ github.workspace }}/${{ inputs.solution-directory }}/Coverage/cobertura.xml
          source-directory: ${{ github.workspace }}/${{ inputs.solution-directory }}
  
      - name: Report code coverage
        if: github.event_name == 'pull_request' && github.event.pull_request.merged == false
        uses: 5monkeys/cobertura-action@master
        with:
          report_name: "Coverage: ${{ inputs.solution-name }} ${{ inputs.test-project-filter-part }}"
          path: ${{ inputs.solution-directory }}/Coverage/cobertura.xml
          minimum_coverage: 80
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          skip_covered: false
          fail_below_threshold: false
          show_class_names: true
          show_missing: true
          link_missing_lines: true
          link_missing_lines_source_dir: ${{ inputs.solution-directory }}