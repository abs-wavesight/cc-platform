name: Shared - Dotnet Build

on:
  workflow_call:
    inputs:
      solution-directory: # service
        required: true
        type: string
        description: Relative to the repository root (e.g., "service")
      solution-name: # Drex.sln
        required: true
        type: string
        description: Should be found with the `solution-directory` (e.g., "Drex.sln")
      test-project-filter-part: # & FullyQualifiedName!~FileShipper
        required: false
        type: string
        description: Partial filter statement to be used with dotnet test (e.g., "& FullyQualifiedName!~FileShipper")
      run-unit-tests:
        required: false
        type: boolean
        default: true
        description: Flag allows run or skip unit tests
      run-integration-tests:
        required: false
        type: boolean
        default: false
        description: Flag allows run or skip integration tests
      run-e2e-tests:
        required: false
        type: boolean
        default: false
        description: Flag allows run or skip e2e tests
      run-coverage:
        required: false
        type: boolean
        default: false
        description: Flag allows run or skip coverage
      install-docker-compose:
        required: false
        type: boolean
        default: false
        description: Will install docker-compose before running tests
      check-code-formatting:
        required: false
        type: boolean
        default: false
        description: If true, will fail build if formatting changes are detected (using dotnet format)
      use-submodules:
        required: false
        type: boolean
        default: false
        description: If true, will it will restore Submodules
      dotnet-version:        
        required: false
        type: string
        default: '7.0.x'
        description: .NET SDK Version

      # SonarQube Input Parameters
      sonar-project-key:
        required: true
        description: "Reposiroty ID in SonarQube"
        type: string
      sonar-project-base-directory:
        required: true
        description: "Root of repository for build analysis"
        type: string
      # sonar-token:
      #   required: true
      #   description: "SonarQube Token"
      #   type: string
      run-sonar-scan:
        required: true
        description: "Boolean to run sonarqube (true) or not (false)"
        type: boolean
        default: false


env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  NUGET_PACKAGE_PATH: ${{ github.workspace }}/.nuget/packages
  COVERAGE_OUTPUT_LOCATION: service/{0}/TestResults/*/coverage.cobertura.xml
  DOCKER_REPO: ghcr.io/abs-wavesight
  RABBITMQ_IMAGE_TAG: windows-2019

defaults:
  run:
    shell: pwsh

jobs:
  build:
    name: Build & Run Tests

    runs-on: windows-2019

    steps:

      - name: Dump context
        uses: abs-wavesight/cc-platform/actions/dump-context@main

      - name: Checkout branch with Submodules - ${{ inputs.use-submodules }}
        if: inputs.use-submodules == true
        uses: actions/checkout@v3        
        with:
          submodules: true
          fetch-depth: 0
          token: ${{ secrets.GH_PAT || ' ' }}

      - name: Checkout branch 
        if: inputs.use-submodules == false
        uses: actions/checkout@v3
        with:
          submodules: false

      - name: Cache nuget packages
        uses: actions/cache@v3
        with:
          path: ${{ env.NUGET_PACKAGE_PATH }}
          key: ${{ runner.OS }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.OS }}-nuget-

      - name: Setup dotnet
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ inputs.dotnet-version}}

      - name: .NET Version
        shell: bash
        run: dotnet --version

      - name: Install docker-compose
        if: inputs.install-docker-compose == true
        run: Start-BitsTransfer -Source "https://github.com/docker/compose/releases/download/v2.18.1/docker-compose-windows-x86_64.exe" -Destination "C:\ProgramData\Chocolatey\bin\docker-compose.exe"

      - name: Confirm docker-compose
        if: inputs.install-docker-compose == true
        run: docker-compose --version

      - name: Nuget - Set Nuget credentials
        working-directory: ./
        run: |
          $AbsNugetUsername = "USERNAME"
          echo "ABS_NUGET_USERNAME=$AbsNugetUsername" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append

          $AbsNugetPassword = "${{ secrets.GH_PAT || github.TOKEN }}"
          echo "ABS_NUGET_PASSWORD=$AbsNugetPassword" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append

      - name: Restore dependencies
        working-directory: ${{ inputs.solution-directory }}
        run: dotnet restore ${{ inputs.solution-name }} --packages ${{ env.NUGET_PACKAGE_PATH }}

      # ------------------- CONFIGURE SONARQUBE ------------------- #

      - name: Run SonarQube Code Scan - ${{ inputs.run-sonar-scan }}
        if: inputs.run-sonar-scan == true
        run: echo "SETTING UP SONARQUBE SCAN"
      
      - name: Set up JDK 17
        if: inputs.run-sonar-scan == true
        uses: actions/setup-java@v4
        with:
          distribution: "adopt"
          java-version: 17

      - name: Cache SonarQube packages
        if: inputs.run-sonar-scan == true
        uses: actions/cache@v1
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache SonarQube scanner
        if: inputs.run-sonar-scan == true
        id: cache-sonar-scanner
        uses: actions/cache@v1
        with:
          path: ./.sonar/scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner

      - name: Install SonarQube scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: bash
        run: |
          if inputs.run-sonar-scan == true; then
            mkdir -p ./.sonar/scanner
            dotnet tool update dotnet-sonarscanner --tool-path ./.sonar/scanner
          else
            echo "SonarQube Scanner is NOT ENABLED"
          fi

      - name: Check SonareQube URL Access
        if: inputs.run-sonar-scan == true
        shell: bash
        run: |
          URL="https://sonarqube.absns.cloud"
          HTTP_STATUS=$(curl -o /dev/null -s -w "%{http_code}\n" "$URL")
          if [ "$HTTP_STATUS" -ne 200 ]; then
            echo "Failed to access $URL, status code: $HTTP_STATUS"
            exit 1
          else
            echo "Successfully accessed $URL, status code: $HTTP_STATUS"
          fi

      # -------------- BEGIN SONARQUBE ANALYSIS ------------------ #

      - name: Begin SonarQube Analysis
        if: inputs.run-sonar-scan == true
        shell: bash
        run: |
          # Begin SonarQube Analysis
          ./.sonar/scanner/dotnet-sonarscanner begin \
            -k:${{ inputs.sonar-project-key }} \
            -d:sonar.token= ${{ secrets.SONAR_TOKEN }} \
            -d:sonar.host.url="https://sonarqube.absns.cloud" \
            -d:sonar.ws.timeout=500 \
            -d:sonar.projectBaseDir=${{ inputs.sonar-project-base-directory }} \
            -d:sonar.qualitygate.wait=true \
            -d:sonar.qualitygate.timeout=2000 \
            -d:sonar.pullrequest.key=${{ github.event.pull_request.number }} \
            -d:sonar.pullrequest.branch=${{ github.event.pull_request.head.ref }} \
            -d:sonar.pullrequest.base=${{ github.event.pull_request.base.ref }}

      # ---------------------------------------------------------- #

      - name: Build
        working-directory: ${{ inputs.solution-directory }}
        run: dotnet build ${{ inputs.solution-name }} -c Release --no-restore


      # -------------- END SONARQUBE ANALYSIS ------------------ #

      - name: End SonarQube Analysis
        if: inputs.run-sonar-scan == true
        shell: bash
        run: |
          # End SonarQube Analysis
          ./.sonar/scanner/dotnet-sonarscanner end -d:sonar.token=${{ inputs.sonar-token }} | tee logs.txt

      - name: Export Sonar Report File
        if: inputs.run-sonar-scan == true
        shell: bash
        run: |
          LINE=$(grep "you can find the results at:" logs.txt)
          URL=$(echo $LINE | grep -Eo 'https://[^ >]+'|head -1)
          echo "url=$URL" >> $GITHUB_OUTPUT
          echo "sonar_output_url=$URL"

      # -------------------------------------------------------- #

      - name: Check code formatting
        if: inputs.check-code-formatting == true
        working-directory: ./
        run: dotnet format "${{ inputs.solution-directory }}/${{ inputs.solution-name }}" --verify-no-changes

      - name: Run unit tests
        if: inputs.run-unit-tests == true
        working-directory: ${{ inputs.solution-directory }}
        run: |
          dotnet test ${{ inputs.solution-name }} -c Release --no-build --filter "FullyQualifiedName!~Integration & FullyQualifiedName!~EndToEnd ${{ inputs.test-project-filter-part }}" --verbosity normal --logger "trx;LogFileName=test-results.trx" --collect:"XPlat Code Coverage;Format=cobertura,xml" /p:CollectCoverage=true -m:1 

      - name: Log in to docker registry
        if: (inputs.run-integration-tests == true || inputs.run-e2e-tests == true)
        run: docker login ghcr.io -u USERNAME --password "${{ secrets.GITHUB_TOKEN }}"
      
      - name: Run integration tests
        if: inputs.run-integration-tests == true
        working-directory: ${{ inputs.solution-directory }}
        run: dotnet test ${{ inputs.solution-name }} -c Release --no-build --filter "FullyQualifiedName~Integration ${{ inputs.test-project-filter-part }}" --verbosity normal --logger "trx;LogFileName=test-results.trx" --collect:"XPlat Code Coverage;Format=cobertura,xml" /p:CollectCoverage=true -m:1

      - name: Run end-to-end tests
        if: inputs.run-e2e-tests == true
        working-directory: ${{ inputs.solution-directory }}
        run: dotnet test ${{ inputs.solution-name }} -c Release --no-build --filter "FullyQualifiedName~EndToEnd ${{ inputs.test-project-filter-part }}" --verbosity normal --logger "trx;LogFileName=test-results.trx" --collect:"XPlat Code Coverage;Format=cobertura,xml" /p:CollectCoverage=true -m:1

      - name: Report test results
        uses: dorny/test-reporter@v1
        if: (success() || failure()) && inputs.run-unit-tests == true
        with:
          name: Test Results ${{ inputs.test-project-filter-part }}
          path: ./${{ inputs.solution-directory }}/**/TestResults/*.trx
          reporter: dotnet-trx

      - name: Merge coverage results
        if: inputs.run-coverage == true
        working-directory: ${{ inputs.solution-directory }}
        run: |
          dotnet tool install --global dotnet-coverage
          mkdir Coverage/
          dotnet-coverage merge *.cobertura.xml --recursive --output Coverage/cobertura.xml --output-format cobertura

      - name: Archive code coverage results
        uses: actions/upload-artifact@v4
        with:
          name: code-coverage-report.zip
          path: ./**/Coverage/cobertura.xml
          retention-days: 5

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    needs: build
    continue-on-error: true
    if: (inputs.run-unit-tests == true || inputs.run-integration-tests == true || inputs.run-e2e-tests == true) && inputs.run-coverage == true

    steps:
      - name: Download code coverage results
        uses: actions/download-artifact@v4
        with:
          name: code-coverage-report.zip

      - name: Code Coverage Report
        uses: irongut/CodeCoverageSummary@v1.3.0
        with:
          filename: /**/cobertura.xml
          badge: true
          fail_below_min: true
          format: markdown
          hide_branch_rate: true
          hide_complexity: true
          indicators: true
          output: both
          thresholds: '75 80'

      - name: Add Coverage PR Comment
        uses: marocchino/sticky-pull-request-comment@v2
        if: github.event_name == 'pull_request'
        with:
          recreate: true
          path: code-coverage-results.md
