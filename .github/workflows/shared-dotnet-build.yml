name: Shared - Dotnet Build

on:
  workflow_call:
    inputs:
      solution-directory: # service
        required: true
        type: string
        description: Relative to the repository root (e.g., "service")
      solution-name: # Drex.sln
        required: true
        type: string
        description: Should be found with the `solution-directory` (e.g., "Drex.sln")
      run-integration-tests:
        required: false
        type: boolean
        default: false
        description: Flag allows run or skip integration tests
      run-e2e-tests:
        required: false
        type: boolean
        default: false
        description: Flag allows run or skip e2e tests

env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  NUGET_PACKAGE_PATH: ${{ github.workspace }}/.nuget/packages
  COVERAGE_OUTPUT_LOCATION: service/{0}/TestResults/*/coverage.cobertura.xml
  DOCKER_IMAGE_CACHE_LOCATION: ${{ github.workspace }}/.docker/images
  DOCKER_IMAGE_CACHE_KEY: cache-docker-common-core
  DOCKER_REPO: ghcr.io/abs-wavesight
  RABBITMQ_IMAGE_TAG: windows-2019

defaults:
  run:
    shell: pwsh

jobs:
  build:
    name: Build & Run Tests

    runs-on: windows-2019

    steps:
      - uses: actions/checkout@v3
        name: Checkout branch

      - name: Cache nuget packages
        uses: actions/cache@v3
        with:
          path: ${{ env.NUGET_PACKAGE_PATH }}
          key: ${{ runner.OS }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.OS }}-nuget-

      - name: Setup dotnet
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 7.0.x

      - name: Nuget - Set Nuget credentials
        working-directory: ./
        run: |
          $AbsNugetUsername = "USERNAME"
          echo "ABS_NUGET_USERNAME=$AbsNugetUsername" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append

          $AbsNugetPassword = "${{ github.TOKEN }}"
          echo "ABS_NUGET_PASSWORD=$AbsNugetPassword" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append

      - name: Restore dependencies
        working-directory: ${{ inputs.solution-directory }}
        run: dotnet restore ${{ inputs.solution-name }} --packages ${{ env.NUGET_PACKAGE_PATH }}

      - name: Build
        working-directory: ${{ inputs.solution-directory }}
        run: dotnet build ${{ inputs.solution-name }} -c Release --no-restore

      - name: Run unit tests
        working-directory: ${{ inputs.solution-directory }}
        run: dotnet test ${{ inputs.solution-name }} -c Release --no-build --filter "FullyQualifiedName!~Integration & FullyQualifiedName!~EndToEnd" --verbosity normal --logger "trx;LogFileName=test-results.trx" /p:CollectCoverage=true /p:CoverletOutputFormat="json%2ccobertura%2clcov" /p:CoverletOutput="../Coverage/" /p:MergeWith="../Coverage/coverage.json" -m:1

      - name: Log in to docker
        run: docker login ghcr.io -u USERNAME --password "${{ secrets.GITHUB_TOKEN }}"

      # - name: Restore CC dependency docker image cache if it exists
      #   if: (inputs.run-integration-tests == true || inputs.run-e2e-tests == true)
      #   id: cache-docker-common-core
      #   uses: actions/cache@v3
      #   with:
      #     path: ${{ env.DOCKER_IMAGE_CACHE_LOCATION }}
      #     key: ${{ env.DOCKER_IMAGE_CACHE_KEY }}_rabbitmq_${{ env.RABBITMQ_IMAGE_TAG }}
      
      # - name: Use CC dependency docker image cache (if cache hit)
      #   if: ((inputs.run-integration-tests == true || inputs.run-e2e-tests == true) && steps.cache-docker-common-core.outputs.cache-hit == 'true')
      #   run: docker image load --input "${{ env.DOCKER_IMAGE_CACHE_LOCATION }}/rabbitmq_${{ env.RABBITMQ_IMAGE_TAG }}.tar"

      # # NOTE: We are intentionally running this every time (even if cache is hit), as we want to ensure we have the latest image
      # - name: Update CC dependency docker image cache
      #   if: (inputs.run-integration-tests == true || inputs.run-e2e-tests == true)
      #   run: |
      #     New-Item -ItemType Directory -Force -Path "${{ env.DOCKER_IMAGE_CACHE_LOCATION }}"

      #     Write-Output "Pulling Docker image..."
      #     $PullOutput = (docker pull "${{ env.DOCKER_REPO }}/rabbitmq:${{ env.RABBITMQ_IMAGE_TAG }}") | Out-String

      #     if ($PullOutput -notlike "*Image is up to date*") {
      #       Write-Output "Saving Docker image..."
      #       & docker image save ${{ env.DOCKER_REPO }}/rabbitmq:${{ env.RABBITMQ_IMAGE_TAG }} --output "${{ env.DOCKER_IMAGE_CACHE_LOCATION }}/rabbitmq_${{ env.RABBITMQ_IMAGE_TAG }}.tar"
      #     }
      #     else {
      #       Write-Output "Docker image is up to date. Skipping save."
      #     }

      #     Write-Output "Done."

      - name: Run integration tests
        if: inputs.run-integration-tests == true
        working-directory: ${{ inputs.solution-directory }}
        run: dotnet test ${{ inputs.solution-name }} -c Release --no-build --filter "FullyQualifiedName~Integration" --verbosity normal --logger "trx;LogFileName=test-results.trx" /p:CollectCoverage=true /p:CoverletOutputFormat="json%2ccobertura%2clcov" /p:CoverletOutput="../Coverage/" /p:MergeWith="../Coverage/coverage.json" -m:1

      - name: Run end-to-end tests
        if: inputs.run-e2e-tests == true
        working-directory: ${{ inputs.solution-directory }}
        run: dotnet test ${{ inputs.solution-name }} -c Release --no-build --filter "FullyQualifiedName~EndToEnd" --verbosity normal --logger "trx;LogFileName=test-results.trx" /p:CollectCoverage=true /p:CoverletOutputFormat="json%2ccobertura%2clcov" /p:CoverletOutput="../Coverage/" /p:MergeWith="../Coverage/coverage.json" -m:1

      - name: Report test results
        uses: dorny/test-reporter@v1
        if: success() || failure()
        with:
          name: Test Results
          path: ./${{ inputs.solution-directory }}/**/TestResults/*.trx
          reporter: dotnet-trx

      - uses: romeovs/lcov-reporter-action@v0.3.1
        if: github.event_name == 'pull_request' && github.event.pull_request.merged == false
        name: Add code coverage comment to PR
        with:
          lcov-file: ${{ inputs.solution-directory }}/Coverage/coverage.info
          delete-old-comments: true
          github-token: ${{ secrets.GITHUB_TOKEN }}
