name: Shared - Docker Build And Push

on:
  workflow_call:
    inputs:
      image-name: # cc-drex-message-service
        required: true
        type: string
      label-description: # ABS Common Core Data Remote EXchange Service (D-REX)
        required: true
        type: string
      docker-context-directory: # service
        required: true
        type: string
        description: Relative to the repository root (e.g., "service")
      solution-directory: # service
        required: true
        type: string
        description: Relative to the repository root (e.g., "service")
      dockerfile-name: # DrexMessage.Dockerfile
        required: true
        type: string
        description: Should be found with the `solution-directory` (e.g., "DrexMessage.Dockerfile")
      container-version:
        required: false
        type: string
        default: '0.0.0.0'
        description: Should be found with the repository (e.g., "1.0.1.1")
      use-submodules:
        required: false
        type: boolean
        default: false
        description: If true, will it will restore Submodules
      dotnet-version:        
        required: false
        type: string
        default: '7.0.x'
        description: .NET SDK Version
      container-type:
        required: false
        type: string
        default: 'application'
        description: The application type

env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ inputs.image-name }}
  ASPNET_FULLSERVER_TAG_WIN2019: 7.0-windowsservercore-ltsc2019
  ASPNET_FULLSERVER_TAG_WIN2022: 7.0-windowsservercore-ltsc2022
  DOTNET_IMAGE_TAG_WIN2019: 7.0-nanoserver-1809
  DOTNET_IMAGE_TAG_WIN2022: 7.0-nanoserver-ltsc2022
  POWERSHELL_IMAGE_TAG_WIN2019: lts-7.2-nanoserver-1809
  POWERSHELL_IMAGE_TAG_WIN2022: nanoserver-ltsc2022
  LABEL_PREFIX: org.eagle.wavesight
  IMAGE_DESCRIPTION: ${{ inputs.label-description }}

defaults:
  run:
    shell: pwsh

jobs:
  get_clean_branch_names:
    name: Get Clean Branch Names
    uses: ./.github/workflows/shared-get-clean-branch-names.yml

  push-image:
    name: Push Container Image
    needs: [ get_clean_branch_names ]
    strategy:
      matrix:
        os: [ windows-2019, windows-2022 ]

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout branch with Submodules - ${{ inputs.use-submodules }}
        if: inputs.use-submodules == true
        uses: actions/checkout@v3        
        with:
          submodules: true
          fetch-depth: 0
          token: ${{ secrets.GH_PAT || ' ' }}
          
      - name: Checkout branch 
        if: inputs.use-submodules == false
        uses: actions/checkout@v3
        with:
          submodules: false

      - name: Construct tag-friendly shortened git SHA
        working-directory: ${{ inputs.solution-directory }}
        run: |
          $tagFriendlySha=$Env:GITHUB_SHA
          $tagFriendlySha=$tagFriendlySha.Substring(0, 7)
          echo "Tag-friendly git SHA: $tagFriendlySha"
          echo "SHORT_SHA=$tagFriendlySha" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append

      - name: Nuget - Copy config
        working-directory: ./
        run: Copy-Item ./nuget.config ${{ inputs.solution-directory }}

      - name: Nuget - Set Nuget credentials
        working-directory: ./
        run: |
          $AbsNugetUsername = "USERNAME"
          echo "ABS_NUGET_USERNAME=$AbsNugetUsername" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append

          $AbsNugetPassword = "${{ github.TOKEN }}"
          echo "ABS_NUGET_PASSWORD=$AbsNugetPassword" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append

      - name: Build and push Docker image
        id: build-and-push-container
        if: inputs.dotnet-version != '8.0.x'
        uses: mr-smithers-excellent/docker-build-push@v6
        env:
          BRANCH_NAME: ${{ needs.get_clean_branch_names.outputs.tagFriendlyBranchName }}
          BRANCH_NAME_WITH_PREFIX_DASH: ${{ needs.get_clean_branch_names.outputs.tagFriendlyBranchNameWithPrefixDash }}
        with:
          buildArgs: >-
            ASPNET_FULLSERVER_TAG=${{ matrix.os == 'windows-2022' && env.ASPNET_FULLSERVER_TAG_WIN2022 || env.ASPNET_FULLSERVER_TAG_WIN2019 }},
            DOTNET_TAG=${{ matrix.os == 'windows-2022' && env.DOTNET_IMAGE_TAG_WIN2022 || env.DOTNET_IMAGE_TAG_WIN2019 }},
            POWERSHELL_NANOSERVER_TAG=${{ matrix.os == 'windows-2022' && env.POWERSHELL_IMAGE_TAG_WIN2022 || env.POWERSHELL_IMAGE_TAG_WIN2019 }},
            SERVER_VERSION=${{ matrix.os == 'windows-2022' && 'ltsc2022' || 'ltsc2019' }},
            ABS_NUGET_USERNAME="${{ env.ABS_NUGET_USERNAME }}",
            ABS_NUGET_PASSWORD="${{ env.ABS_NUGET_PASSWORD }}"
          image: ${{ env.IMAGE_NAME }}
          registry: ${{ env.REGISTRY }}
          username: ${{ github.ACTOR }}
          password: ${{ secrets.GITHUB_TOKEN }}
          directory: ${{ inputs.docker-context-directory }}
          dockerfile: ${{ inputs.solution-directory }}/${{ inputs.dockerfile-name }}
          pushImage: true
          tags: ${{ matrix.os }}${{ env.BRANCH_NAME_WITH_PREFIX_DASH }},${{ matrix.os }}-${{ env.BRANCH_NAME }}-${{ env.SHORT_SHA }},${{ matrix.os }}-${{ inputs.container-version }}
          labels: >-
            org.opencontainers.image.description="${{ env.IMAGE_DESCRIPTION }}",
            ${{ env.LABEL_PREFIX }}.github-run-number=${{ github.RUN_NUMBER }},
            ${{ env.LABEL_PREFIX }}.branch=${{ env.BRANCH_NAME }},
            ${{ env.LABEL_PREFIX }}.sha=${{ github.SHA }},
            ${{ env.LABEL_PREFIX }}.container_type=${{ inputs.container-type }},
            ${{ env.LABEL_PREFIX }}.container_version=${{ inputs.container-version }}
          addTimestamp: true
          platform: windows/amd64

      - name: Build and push Docker image .NET 8
        id: build-and-push-container-dotnet8
        if: inputs.dotnet-version == '8.0.x'
        uses: mr-smithers-excellent/docker-build-push@v6
        env:
          BRANCH_NAME: ${{ needs.get_clean_branch_names.outputs.tagFriendlyBranchName }}
          BRANCH_NAME_WITH_PREFIX_DASH: ${{ needs.get_clean_branch_names.outputs.tagFriendlyBranchNameWithPrefixDash }}
          ASPNET_FULLSERVER_TAG_WIN2019: 8.0-windowsservercore-ltsc2019
          ASPNET_FULLSERVER_TAG_WIN2022: 8.0-windowsservercore-ltsc2022
          DOTNET_IMAGE_TAG_WIN2019: 8.0-nanoserver-1809
          DOTNET_IMAGE_TAG_WIN2022: 8.0-nanoserver-ltsc2022
        with:
          buildArgs: >-
            ASPNET_FULLSERVER_TAG=${{ matrix.os == 'windows-2022' && env.ASPNET_FULLSERVER_TAG_WIN2022 || env.ASPNET_FULLSERVER_TAG_WIN2019 }},
            SERVER_VERSION=${{ matrix.os == 'windows-2022' && 'ltsc2022' || 'ltsc2019' }},
            DOTNET_TAG=${{ matrix.os == 'windows-2022' && env.DOTNET_IMAGE_TAG_WIN2022 || env.DOTNET_IMAGE_TAG_WIN2019 }},
            POWERSHELL_NANOSERVER_TAG=${{ matrix.os == 'windows-2022' && env.POWERSHELL_IMAGE_TAG_WIN2022 || env.POWERSHELL_IMAGE_TAG_WIN2019 }},
            ABS_NUGET_USERNAME="${{ env.ABS_NUGET_USERNAME }}",
            ABS_NUGET_PASSWORD="${{ env.ABS_NUGET_PASSWORD }}"
          image: ${{ env.IMAGE_NAME }}
          registry: ${{ env.REGISTRY }}
          username: ${{ github.ACTOR }}
          password: ${{ secrets.GITHUB_TOKEN }}
          directory: ${{ inputs.docker-context-directory }}
          dockerfile: ${{ inputs.solution-directory }}/${{ inputs.dockerfile-name }}
          pushImage: true
          tags: ${{ matrix.os }}${{ env.BRANCH_NAME_WITH_PREFIX_DASH }},${{ matrix.os }}-${{ env.BRANCH_NAME }}-${{ env.SHORT_SHA }},${{ matrix.os }}-${{ inputs.container-version }}
          labels: >-
            org.opencontainers.image.description="${{ env.IMAGE_DESCRIPTION }}",
            ${{ env.LABEL_PREFIX }}.github-run-number=${{ github.RUN_NUMBER }},
            ${{ env.LABEL_PREFIX }}.branch=${{ env.BRANCH_NAME }},
            ${{ env.LABEL_PREFIX }}.sha=${{ github.SHA }},
            ${{ env.LABEL_PREFIX }}.container_type=${{ inputs.container-type }},
            ${{ env.LABEL_PREFIX }}.container_version=${{ inputs.container-version }}
          addTimestamp: true
          platform: windows/amd64

      - uses: SmartsquareGmbH/delete-old-packages@v0.8.1
        env:
          BRANCH_NAME: ${{ needs.get_clean_branch_names.outputs.tagFriendlyBranchName }}
          BRANCH_NAME_WITH_PREFIX_DASH: ${{ needs.get_clean_branch_names.outputs.tagFriendlyBranchNameWithPrefixDash }}
        if: env.BRANCH_NAME != 'main' && contains(env.BRANCH_NAME, 'release') == 'false'
        name: Prune old package versions
        with:
          organization: abs-wavesight
          type: container
          names: |
            ${{ env.IMAGE_NAME }}
          version-pattern: "^${{ matrix.os }}${{ env.BRANCH_NAME_WITH_PREFIX_DASH }}-(?!${{ env.SHORT_SHA }}$).{7}$" # This will match all versions for this branch's package EXCEPT the one we just published
          keep: 0
          dry-run: false
