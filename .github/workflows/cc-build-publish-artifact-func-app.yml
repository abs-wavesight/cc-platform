name: 'Build and Publish Func App with Dynamic Config'

on:
  workflow_call:
    inputs:
      tagVersion:
         required: true
         type: string
         description: 'Version tag'
      solutionName:
        required: true
        type: string
        description: 'Solution file'
      solutionDirectory:
        required: true
        type: string
        description: 'Solution file path'
      dotnetVersion:
        required: true
        type: string 
        description: '.NET SDK Version'     
      artifactConfigName:
        required: true
        type: string
        description: 'Specifies the name of the local artifact containing config file for current solution'
      artifactConfigFile:
        required: true
        type: string
        description: 'Specifies the config file name from loact artifact containing configuration. This name will also used for uploading to Release Assets'
      artifactOutput:
        required: true
        type: string
        description: 'Specifies the name of the Release Asset that will contain builded functions'  
    secrets:
      GH_PAT:
        required: false
env:
  NUGET_PACKAGE_PATH: ${{ github.workspace }}\.nuget\packages  
  
jobs:
  build_and_publish_windows:
    runs-on: windows-2019
    outputs:
      should_wrap: ${{ steps.publish.outputs.should_wrap }}
    steps:
      - name: 'Checkout GitHub Action'
        uses: actions/checkout@v3
        with:
          submodules: true
          fetch-depth: 0
          token: ${{ secrets.GH_PAT || ' ' }}

      - name: Nuget - Set Nuget credentials
        working-directory: ./
        run: |
          $AbsNugetUsername = "USERNAME"
          echo "ABS_NUGET_USERNAME=$AbsNugetUsername" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append

          $AbsNugetPassword = "${{  secrets.GH_PAT || github.TOKEN }}"
          echo "ABS_NUGET_PASSWORD=$AbsNugetPassword" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append      

      - name: Clear NuGet cache
        run: nuget locals all -clear

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ inputs.dotnetVersion }}

      - name: Restore dependencies
        working-directory: ${{ inputs.solutionDirectory }}
        run: dotnet restore ${{ inputs.solutionName }} --no-cache --packages ${{ env.NUGET_PACKAGE_PATH }}

      - name: 'Build the Project'
        working-directory: ${{ inputs.solutionDirectory }}
        run: dotnet build ${{ inputs.solutionName }} --configuration Release --no-restore

      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.artifactConfigName }}
          path: downloaded-artifacts/      

      - name: Publish Version 
        working-directory: ${{ inputs.solutionDirectory }}
        shell: pwsh
        id: publish
        run: |
          $artifactPath = Join-Path -Path "${{ github.workspace }}\downloaded-artifacts" -ChildPath "${{ inputs.artifactConfigFile }}"          
          $functionConfigs = Get-Content $artifactPath | ConvertFrom-Json
          $artifactOutputDir = "${{ github.workspace }}\artifacts"
          New-Item -ItemType Directory -Force -Path $artifactOutputDir
          $hasWrap = $false
          foreach ($config in $functionConfigs) {            
               $functionPack  = Join-Path $config.FUNCTION_PROJECT_PATH "publish" 
               dotnet publish $config.FUNCTION_PROJECT_PATH --configuration Release --no-build --output $functionPack  
               
               Write-Host "‚ÑπÔ∏è Setup version: ${{ inputs.tagVersion }}"

               $hostJsonPath = Join-Path -Path $functionPack -ChildPath "host.json"
               $hostJson = Get-Content $hostJsonPath | ConvertFrom-Json
               Add-Member -InputObject $hostJson -MemberType NoteProperty -Name "tagVersion" -Value "${{ inputs.tagVersion }}"
               $hostJson | ConvertTo-Json | Set-Content $hostJsonPath
               
               $zipFilePath = Join-Path $artifactOutputDir "$($config.Name).zip" 
               Compress-Archive -Path "$($functionPack)\*" -DestinationPath $zipFilePath
               Write-Host "üì¶ Zipped $($config.Name) function app to: $zipFilePath"   
               
                if ($null -ne $config.wrap) {
                  $hasWrap = $true
                  Write-Host "‚úÖ Docker wrap configuration detected for $($config.Name)"
                }
          }

          "should_wrap=$hasWrap" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
     
          $zipFileName = "${{ inputs.artifactOutput }}.zip"
          $zipFilePath = Join-Path -Path "${{ github.workspace }}" -ChildPath $zipFileName
          Compress-Archive -Path "$artifactOutputDir\*" -DestinationPath $zipFilePath
          Write-Host "üì¶ Created zip: $zipFilePath"     
         

      - name: Publish to GitHub Release
        uses: ncipollo/release-action@v1
        with:
            allowUpdates: true            
            tag: ${{ inputs.tagVersion }}
            commit: ${{ github.sha }}
            name: Release ${{ inputs.tagVersion }}
            artifacts: ${{ github.workspace }}\${{ inputs.artifactOutput }}.zip, ${{ github.workspace }}\downloaded-artifacts\${{ inputs.artifactConfigFile}}             

      - name: Tag current build
        run: |
            git config --global user.name 'github-actions'
            git config --global user.email 'github-actions@github.com'
            git tag ${{ inputs.tagVersion }}
            git push origin ${{ inputs.tagVersion }}
        shell: pwsh


  build_and_publish_linux:
    runs-on: ubuntu-latest
    needs: build_and_publish_windows
    if: needs.build_and_publish_windows.outputs.should_wrap == 'true'
    steps:
      - name: 'Checkout GitHub Action'
        uses: actions/checkout@v3
        with:
          submodules: true
          fetch-depth: 0
          token: ${{ secrets.GH_PAT || ' ' }}

      - name: Nuget - Set Nuget credentials        
        shell: pwsh
        run: |
          $AbsNugetUsername = "USERNAME"
          echo "ABS_NUGET_USERNAME=$AbsNugetUsername" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append

          $AbsNugetPassword = "${{  secrets.GH_PAT || github.TOKEN }}"
          echo "ABS_NUGET_PASSWORD=$AbsNugetPassword" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append      

      - name: Clear NuGet cache
        shell: pwsh
        run: dotnet nuget locals all --clear

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ inputs.dotnetVersion }}

      - name: Restore dependencies
        shell: pwsh
        working-directory: ${{ inputs.solutionDirectory }}
        run: dotnet restore ${{ inputs.solutionName }} --no-cache --packages ${{ env.NUGET_PACKAGE_PATH }}

      - name: Build the Project
        shell: pwsh
        working-directory: ${{ inputs.solutionDirectory }}
        run: dotnet build ${{ inputs.solutionName }} --configuration Release --no-restore

      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.artifactConfigName }}
          path: downloaded-artifacts/      

      - name: Publish Version and Docker Build         
        working-directory: ${{ inputs.solutionDirectory }}
        shell: pwsh
        id: publish
        run: |
          $artifactPath = Join-Path -Path "${{ github.workspace }}/downloaded-artifacts" -ChildPath "${{ inputs.artifactConfigFile }}"          
          $functionConfigs = Get-Content $artifactPath | ConvertFrom-Json
          $artifactOutputDir = "${{ github.workspace }}/artifacts"
          New-Item -ItemType Directory -Force -Path $artifactOutputDir
          
          foreach ($config in $functionConfigs) {   
               $functionPack  = Join-Path $config.FUNCTION_PROJECT_PATH "publish" 
               $functionProjectPath = $config.FUNCTION_PROJECT_PATH
 
               Write-Host "üìÇ Listing all files before cleanup:"
               Get-ChildItem -Path $functionProjectPath -Recurse -File | ForEach-Object {
                   Write-Host $_.FullName
               }

               if (Test-Path $functionPack) {
                  Write-Host "üßπ Removing existing 'publish' folder: $functionPack"
                  Remove-Item -Path $functionPack -Recurse -Force
               } else {
                  Write-Host "‚úÖ 'publish' folder does not exist. Nothing to remove."
               }
               
               dotnet publish $config.FUNCTION_PROJECT_PATH --configuration Release --no-build --output $functionPack  
               
               Write-Host "Setup version: ${{ inputs.tagVersion }}"

               $hostJsonPath = Join-Path -Path $functionPack -ChildPath "host.json"
               $hostJson = Get-Content $hostJsonPath | ConvertFrom-Json
               Add-Member -InputObject $hostJson -MemberType NoteProperty -Name "tagVersion" -Value "${{ inputs.tagVersion }}"
               $hostJson | ConvertTo-Json | Set-Content $hostJsonPath

               # ==========================================
               # Docker wrap logic
               # ==========================================
               if ($null -ne $config.wrap) {
                 Write-Host "üëÄ Docker wrap configuration detected for $($config.Name). Proceeding with Docker build and push..."
               
                 $dockerfile =  Join-Path $config.FUNCTION_PROJECT_PATH $config.wrap.dockerfile
                 $image = $config.wrap.image
                 $registry = $config.wrap.registry
                 $namespace = $config.wrap.namespace     
               
                 $version = "${{ inputs.tagVersion }}"
                 $imageName = "$registry/$namespace/$image"
                 $imageCurrent = "${imageName}:${version}"
                 $imageLatest = "${imageName}:latest"
               
                 Write-Host "üöÄ Building Docker image: $imageName using Dockerfile: $dockerfile"
               
                 # Docker login
                 echo "${{ secrets.GH_PAT }}" | docker login $registry -u "${{ github.ACTOR }}" --password-stdin
                
                 docker build -t "${imageCurrent}" -t "${imageLatest}" -f "$dockerfile" $functionProjectPath
                
                 Write-Host "Building Docker finished. Pushing Docker image to registry..."
                 docker push "${imageCurrent}"
                 docker push "${imageLatest}"
               
                 Write-Host "‚úÖ Docker image $imageName built and pushed successfully!"
               } else {
                 Write-Host "‚ùå No Docker wrap configuration found for $($config.Name). Skipping Docker build."
               }            
          }