name: .NET Restore + Build

inputs:
  gh-token:
    description: "GitHub Token"
    required: false
  sonar-token:
    description: "SonarQube Token"
    required: true
  sonar-host-url:
    description: "SonarQube Host URL"
    required: true
  branch-name:
    description: "Branch name for sonarqube"
    default: ${{ github.event.pull_request.head.ref }}
  project-key:
    description: "SonarQube Project Key"
    default: ${{ github.event.repository.name }}
    type: string
  working-directory:
    description: "Working directory for dotnet"
    required: false
    default: src
  solution-file:
    description: "Working directory for dotnet"
    required: false
  dotnet-version:
    required: true
    type: string
    description: ".NET SDK Version"
  sonarscan-enabled:
    description: "Boolean to run sonarqube (true) or not (false)"
    default: false
runs:
  using: "composite"
  steps:
    - name: Setup .NET 8
      if: ${{ inputs.sonarscan-enabled == 'true' }}
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ inputs.dotnet-version }}

    - name: .NET Version
      if: ${{ inputs.sonarscan-enabled == 'true' }}
      shell: bash
      run: dotnet --version

    - name: Checkout GitHub Action
      if: ${{ inputs.sonarscan-enabled == 'true' }}
      uses: actions/checkout@v3
      with:
        submodules: true
        fetch-depth: 0
        token: ${{ inputs.gh-token || ' ' }}

    - name: Set NuGet credentials
      if: ${{ inputs.sonarscan-enabled == 'true' }}
      shell: pwsh
      run: |
        $AbsNugetUsername = "USERNAME"
        echo "ABS_NUGET_USERNAME=$AbsNugetUsername" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append

        $AbsNugetPassword = "${{ inputs.gh-token || github.TOKEN }}"
        echo "ABS_NUGET_PASSWORD=$AbsNugetPassword" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append

    - name: .NET Restore - Install dependencies
      if: ${{ inputs.sonarscan-enabled == 'true' }}
      working-directory: ${{ inputs.working-directory }}
      shell: bash
      run: dotnet restore ${{ inputs.solution-file }} --packages ${{ github.workspace }}\.nuget\packages

    - name: Set up JDK 17
      if: ${{ inputs.sonarscan-enabled == 'true' }}
      uses: actions/setup-java@v4
      with:
        distribution: "adopt"
        java-version: 17

    - name: Cache SonarQube packages
      if: ${{ inputs.sonarscan-enabled == 'true' }}
      uses: actions/cache@v1
      with:
        path: ~/.sonar/cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar

    - name: Cache SonarQube scanner
      if: ${{ inputs.sonarscan-enabled == 'true' }}
      id: cache-sonar-scanner
      uses: actions/cache@v1
      with:
        path: ./.sonar/scanner
        key: ${{ runner.os }}-sonar-scanner
        restore-keys: ${{ runner.os }}-sonar-scanner

    - name: Install SonarQube scanner
      if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
      shell: bash
      run: |
        mkdir ./.sonar/scanner
        dotnet tool update dotnet-sonarscanner --tool-path ./.sonar/scanner

    - name: Check SonareQube URL Access
      if: ${{ inputs.sonarscan-enabled == 'true' }}
      shell: bash
      run: |
        URL="${{ inputs.sonar-host-url }}"
        HTTP_STATUS=$(curl -o /dev/null -s -w "%{http_code}\n" "$URL")
        if [ "$HTTP_STATUS" -ne 200 ]; then
          echo "Failed to access $URL, status code: $HTTP_STATUS"
          exit 1
        else
          echo "Successfully accessed $URL, status code: $HTTP_STATUS"
        fi

    #********************* DENYS' INITIAL CODE *********************
    # - name: SonarQube Begin Analysis
    #   shell: bash
    #   run: |
    #     ./.sonar/scanner/dotnet-sonarscanner begin -k:"${{ inputs.project-key }}" -d:sonar.login="${{ inputs.sonar-token }}" -d:sonar.host.url="${{ inputs.sonar-host-url }}" -d:sonar.projectBaseDir="${{ inputs.working-directory }}"

    # - name: Build
    #   shell: bash
    #   working-directory: ${{ inputs.working-directory }}
    #   run: |
    #     dotnet build ${{ inputs.solution-file }} --configuration Release

    # - name: SonarQube End Analysis
    #   shell: bash
    #   run: |
    #     ./.sonar/scanner/dotnet-sonarscanner end -d:sonar.login="${{ inputs.sonar-token }}" -d:sonar.projectBaseDir="${{ inputs.working-directory }}" | tee logs.txt
    #********************* DENYS' INITIAL CODE *********************

    - name: Begin SonarQube Analysis
      if: ${{ inputs.sonarscan-enabled == 'true' }}
      shell: bash
      run: |
        # Begin SonarQube Analysis
        ./.sonar/scanner/dotnet-sonarscanner begin \
          -k:${{ inputs.project-key }} \
          -d:sonar.token=${{ inputs.sonar-token }} \
          -d:sonar.host.url=${{ inputs.sonar-host-url }} \
          -d:sonar.branch.name=${{ inputs.branch-name }} \
          -d:sonar.ws.timeout=500 \
          -d:sonar.projectBaseDir=${{ inputs.working-directory }}

        # Build .NET Project 
        dotnet build ${{ inputs.solution-file }} --configuration Release

        # End SonarQube Analysis
        ./.sonar/scanner/dotnet-sonarscanner end -d:sonar.token=${{ inputs.sonar-token }} | tee logs.txt

    - name: Export Sonar Report File
      if: ${{ inputs.sonarscan-enabled == 'true' }}
      shell: bash
      run: |
        LINE=$(grep "you can find the results at:" logs.txt)
        URL=$(echo $LINE | grep -Eo 'https://[^ >]+'|head -1)
        echo "url=$URL" >> $GITHUB_OUTPUT
        echo "sonar_output_url=$URL"
