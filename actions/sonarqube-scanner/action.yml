name: .NET Restore + Build

inputs:
  gh-token:
    description: "GitHub Token"
    required: false
  sonar-token:
    description: "SonarQube Token"
    required: true
  sonar-host-url:
    description: "SonarQube Host URL"
    required: true
  branch-name:
    description: "Branch name for sonarqube"
    default: ${{ github.event.pull_request.head.ref }}
  working-directory:
    description: "Working directory for dotnet"
    required: false
    default: src
  solution-name:
    description: "Working directory for dotnet"
    required: false
  dotnet-version:
    required: true
    type: string
    description: ".NET SDK Version"
  project-key:
    description: "SonarQube Project Key"
    default: ${{ github.event.repository.name }}
    type: string

runs:
  using: "composite"
  steps:
    - name: Setup .NET 8
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ inputs.dotnet-version }}

    - name: .NET Version
      shell: bash
      run: dotnet --version

    - name: Checkout GitHub Action
      uses: actions/checkout@v3
      with:
        submodules: true
        fetch-depth: 0
        token: ${{ inputs.gh-token || ' ' }}

    - name: Set NuGet credentials
      shell: pwsh
      run: |
        $AbsNugetUsername = "USERNAME"
        echo "ABS_NUGET_USERNAME=$AbsNugetUsername" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append

        $AbsNugetPassword = "${{ inputs.gh-token || github.TOKEN }}"
        echo "ABS_NUGET_PASSWORD=$AbsNugetPassword" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append

    - name: .NET Restore - Install dependencies
      working-directory: ${{ inputs.working-directory }}
      shell: bash
      run: dotnet restore ${{ inputs.solution-name }} --packages ${{ github.workspace }}\.nuget\packages

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        distribution: "adopt"
        java-version: 17

    - name: Cache SonarQube packages
      uses: actions/cache@v1
      with:
        path: ~\.sonar\cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar

    - name: Cache SonarQube scanner
      id: cache-sonar-scanner
      uses: actions/cache@v1
      with:
        path: .\.sonar\scanner
        key: ${{ runner.os }}-sonar-scanner
        restore-keys: ${{ runner.os }}-sonar-scanner

    - name: Install SonarQube scanner
      if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
      shell: pwsh
      run: |
        New-Item -Path .\.sonar\scanner -ItemType Directory
        dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner

    # - name: Install SonarQube scanner
    #   if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
    #   shell: pwsh
    #   run: |
    #     mkdir -p ./.sonar/scanner
    #     dotnet tool update dotnet-sonarscanner --tool-path ./.sonar/scanner

    - name: Check SonareQube URL Access
      shell: bash
      run: |
        URL="${{ inputs.sonar-host-url }}"
        HTTP_STATUS=$(curl -o /dev/null -s -w "%{http_code}\n" "$URL")
        if [ "$HTTP_STATUS" -ne 200 ]; then
          echo "Failed to access $URL, status code: $HTTP_STATUS"
          exit 1
        else
          echo "Successfully accessed $URL, status code: $HTTP_STATUS"
        fi

    #********************* DENYS' INITIAL CODE *********************   
    # - name: SonarQube Begin Analysis
    #   shell: bash
    #   run: |
    #     ./.sonar/scanner/dotnet-sonarscanner begin -k:"${{ inputs.project-key }}" -d:sonar.login="${{ inputs.sonar-token }}" -d:sonar.host.url="${{ inputs.sonar-host-url }}" -d:sonar.projectBaseDir="${{ inputs.working-directory }}"

    # - name: Build
    #   shell: bash
    #   working-directory: ${{ inputs.working-directory }}
    #   run: |
    #     dotnet build ${{ inputs.solution-name }} --configuration Release

    # - name: SonarQube End Analysis      
    #   shell: bash
    #   run: |
    #     ./.sonar/scanner/dotnet-sonarscanner end -d:sonar.login="${{ inputs.sonar-token }}" -d:sonar.projectBaseDir="${{ inputs.working-directory }}" | tee logs.txt
    #********************* DENYS' INITIAL CODE *********************

    - name: Begin SonarQube Analysis
      shell: pwsh
      #working-directory: ${{ inputs.working-directory }}
      run: |
        #Begin SonarQube Analysis
        .\.sonar\scanner\dotnet-sonarscanner begin `
          /k:${{ inputs.project-key }} `
          /d:sonar.token=${{ inputs.sonar-token }} `
          /d:sonar.host.url=${{ inputs.sonar-host-url }} `
          /d:sonar.ws.timeout=500 `
          /d:sonar.projectBaseDir=.\api `
          /d:sonar.scanner.skipJreProvisioning=true

        #Build .NET Project 
        dotnet build .\api\${{ inputs.solution-name }} --configuration Release

        #End SonarQube Analysis 
        .\.sonar\scanner\dotnet-sonarscanner end `
          /d:sonar.token=${{ inputs.sonar-token }} `

    # - name: Build .NET Project
    #   shell: bash
    #   run: |
    #     #Build .NET Project 
    #     dotnet build ./${{ inputs.working-directory }}/${{ inputs.solution-name }} --configuration Release

    # - name: End SonarQube Analysis
    #   shell: pwsh
    #   run: |   
    #     #End SonarQube Analysis 
    #     .\.sonar\scanner\dotnet-sonarscanner end `
    #       /d:sonar.token=${{ inputs.sonar-token }} `

    #MDF .NET SONAR SCAN CODE
    # - name: SonarQubeAnalyze
    #   shell: bash
    #   working-directory: ${{ inputs.working-directory }}
    #   run: |
    #     # Begin SonarQube Analysis
    #     dotnet-sonarscanner begin \
    #       /k:${{ inputs.project-key }} \
    #       /d:sonar.token=${{ inputs.sonar-token }} \
    #       /d:sonar.host.url=${{ inputs.sonar-host-url }} \
    #       /d:sonar.branch.name=${{ inputs.branch-name }} \
    #       /d:sonar.ws.timeout=500 \
    #       /d:sonar.projectBaseDir=${{ inputs.working-directory }} \
    #       /d:sonar.scanner.skipJreProvisioning=true
          
    #     # Build the .net Project
    #     dotnet build ${{ inputs.solution-name }} --configuration Release --output ./bin/output/

    #     # End SonarQube Analysis
    #     for i in {1..3}; do
    #       if dotnet-sonarscanner end /d:sonar.token=${{ inputs.sonarqube-token }}; then
    #         break
    #       else
    #         echo "Retry $i failed, retrying in 30 seconds..."
    #         sleep 30
    #       fi
    #     done | tee logs.txt
    #   env:
    #     GITHUB_TOKEN: ${{ inputs.gh-token }}
    #   continue-on-error: true

    # - name: Export Sonar Report File
    #   shell: bash
    #   run: |
    #     LINE=$(grep "you can find the results at:" logs.txt)
    #     URL=$(echo $LINE | grep -Eo 'https://[^ >]+'|head -1)
    #     echo "url=$URL" >> $GITHUB_OUTPUT
    #     echo "sonar_output_url=$URL"

