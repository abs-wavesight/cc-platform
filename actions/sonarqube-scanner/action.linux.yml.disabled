name: .NET Build + SonarQube Scanner
description: Builds .NET project and runs SonarQube scanner
inputs:
  solution-directory:
    required: true
    description: Relative to the repository root (e.g., "service")
  solution-name:
    required: true
    description: Should be found with the `solution-directory` (e.g., "Drex.sln")
  sonar-project-key:
    required: true
    description: "Reposiroty ID in SonarQube"
  sonar-project-base-directory:
    required: true
    description: "Root of repository for build analysis"
  sonar-token:
    required: true
    description: "SonarQube Token"

runs:
  using: "composite"
  steps:
    - name: Echo Github.Workspace
      shell: bash
      run: echo ${{ github.workspace }}

    # 1.------------------ CONFIGURE SONARQUBE ------------------- #
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        path: ${{ inputs.solution-directory }}
        distribution: "adopt"
        java-version: 17

    - name: Cache SonarQube packages
      uses: actions/cache@v4
      with:
        path: ${{ inputs.solution-directory }}/.sonar/cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar

    - name: Cache SonarQube scanner
      id: cache-sonar-scanner
      uses: actions/cache@v4
      with:
        path: ${{ inputs.solution-directory }}/.sonar/scanner
        key: ${{ runner.os }}-sonar-scanner
        restore-keys: ${{ runner.os }}-sonar-scanner

    - name: Install SonarQube scanner
      if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
      working-directory: ${{ inputs.solution-directory }}
      shell: bash
      run: |
        mkdir -p ./.sonar/scanner
        dotnet tool update dotnet-sonarscanner --tool-path ./.sonar/scanner
      # run: |
      #   if inputs.run-sonar-scan == true; then
      #     mkdir -p ./.sonar/scanner
      #     dotnet tool update dotnet-sonarscanner --tool-path ./.sonar/scanner
      #   else
      #     echo "SonarQube Scanner is NOT ENABLED"
      #   fi

    - name: Check SonareQube URL Access
      shell: bash
      run: |
        URL="https://sonarqube.absns.cloud"
        HTTP_STATUS=$(curl -o /dev/null -s -w "%{http_code}\n" "$URL")
        if [ "$HTTP_STATUS" -ne 200 ]; then
          echo "Failed to access $URL, status code: $HTTP_STATUS"
          exit 1
        else
          echo "Successfully accessed $URL, status code: $HTTP_STATUS"
        fi

    # 2.-----  BUILD SOLUTION with SONARQUBE ANALYSIS-------- #
    - name: Build Solution w/ SonarQube Analysis
      working-directory: ${{ inputs.solution-directory }}
      shell: bash
      run: |
        # Begin SonarQube Analysis
        ./.sonar/scanner/dotnet-sonarscanner begin \
          -k:${{ inputs.sonar-project-key }} \
          -d:sonar.token=${{ inputs.sonar-token }} \
          -d:sonar.host.url="https://sonarqube.absns.cloud" \
          -d:sonar.ws.timeout=500 \
          -d:sonar.projectBaseDir=${{ inputs.sonar-project-base-directory }} \
          -d:sonar.qualitygate.wait=true \
          -d:sonar.qualitygate.timeout=500000 \
          -d:sonar.pullrequest.key=${{ github.event.pull_request.number }} \
          -d:sonar.pullrequest.branch=${{ github.event.pull_request.head.ref }} \
          -d:sonar.pullrequest.base=${{ github.event.pull_request.base.ref }}

        # Build .NET Project
        dotnet build ${{ inputs.solution-name }} -c Release --no-restore

        # End SonarQube Analysis
        ./.sonar/scanner/dotnet-sonarscanner end -d:sonar.token=${{ inputs.sonar-token }} | tee logs.txt

    - name: Export Sonar Report File
      working-directory: ${{ inputs.solution-directory }}
      shell: bash
      run: |
        LINE=$(grep "View details on " logs.txt)
        URL=$(echo $LINE | grep -Eo 'https://[^ >]+'|head -1)
        echo "url=$URL" >> $GITHUB_OUTPUT
        echo "sonar_output_url=$URL"
  # ---------------------------------------------------------- #
