name: .NET Build + SonarQube Scanner
description: Builds .NET project and runs SonarQube scanner
inputs:
  solution-directory:
    required: true
    description: Relative to the repository root (e.g., "service")
  solution-name:
    required: true
    description: Should be found with the `solution-directory` (e.g., "Drex.sln")
  sonar-project-key:
    required: true
    description: "Reposiroty ID in SonarQube"
  sonar-token:
    required: true
    description: "SonarQube Token"
  sonar-exclusion-paths:
    required: false
    description: "Comma separated list of paths to exclude from SonarQube analysis"
    default: ""

runs:
  using: "composite"
  steps:
    # 1.------------------ CONFIGURE SONARQUBE ------------------- #
    # - name: Set Sonar Branch Name
    #   id: branch_name
    #   shell: bash
    #   run: |
    #     if [ "${{ github.event_name }}" == "pull_request" ]; then
    #       echo "BRANCH_NAME=${{ github.event.pull_request.head.ref }}" >> $GITHUB_ENV
    #     else
    #       echo "BRANCH_NAME=${{ github.ref_name }}" >> $GITHUB_ENV
    #     fi

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: 17
        distribution: "adopt"

    - name: Cache SonarQube packages
      uses: actions/cache@v4
      with:
        path: ./.sonar/cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar

    - name: Cache SonarQube scanner
      id: cache-sonar-scanner
      uses: actions/cache@v4
      with:
        path: ./.sonar/scanner
        key: ${{ runner.os }}-sonar-scanner
        restore-keys: ${{ runner.os }}-sonar-scanner

    - name: Install SonarQube scanner
      if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
      shell: powershell
      run: |
        New-Item -Path .\.sonar\scanner -ItemType Directory
        dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner

    - name: Check SonareQube URL Access
      shell: bash
      run: |
        URL="https://sonarqube.absns.cloud"
        HTTP_STATUS=$(curl -o /dev/null -s -w "%{http_code}\n" "$URL")
        if [ "$HTTP_STATUS" -ne 200 ]; then
          echo "Failed to access $URL, status code: $HTTP_STATUS"
          exit 1
        else
          echo "Successfully accessed $URL, status code: $HTTP_STATUS"
        fi

    # 2.-----  BUILD SOLUTION with SONARQUBE ANALYSIS-------- #
    - name: Build Solution w/ SonarQube Analysis
      working-directory: ${{ github.workspace }}
      shell: powershell
      run: |
        # Begin SonarQube Analysis
        .\.sonar\scanner\dotnet-sonarscanner begin `
          /k:${{ inputs.sonar-project-key }} `
          /d:sonar.token=${{ inputs.sonar-token }} `
          /d:sonar.host.url="https://sonarqube.absns.cloud" `
          /d:sonar.ws.timeout=500 `
          /d:sonar.projectBaseDir=${{ github.workspace }} `
          /d:sonar.branch.name=${{ github.event.pull_request.head.ref }} `
          /d:sonar.scanner.skipJreProvisioning=true `
          /d:sonar.scanner.scanAll=false `
          /d:sonar.exclusions=${{ inputs.sonar-exclusion-paths }} `
          /d:sonar.issue.ignore.multicriteria=e1 `
          /d:sonar.issue.ignore.multicriteria.e1.ruleKey=** `
          /d:sonar.issue.ignore.multicriteria.e1.resourceKey=${{ inputs.sonar-exclusion-paths }}
          #/d:sonar.issue.ignore.paths=${{ inputs.sonar-exclusion-paths }}
          # /d:sonar.test.exclusions=${{ inputs.sonar-exclusion-paths }} `
          
        # Build .NET Project
        dotnet build ${{ inputs.solution-directory }}\${{ inputs.solution-name }} -c Release --no-restore

        # End SonarQube Analysis
        .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.token=${{ inputs.sonar-token }} | Tee-Object -FilePath .\.sonar\sonar-logs.txt

    - name: "Upload Sonar Report File"
      uses: actions/upload-artifact@v4
      with:
        name: sonar-logs
        path: ${{ github.workspace }}/.sonar/sonar-logs.txt
# --------- SONAR QUBE PROPERTY KEYS EXPLAINED  --------- #

# .\.sonar\scanner\dotnet-sonarscanner begin `

#   /k:
#   /d:sonar.token=
#   /d:sonar.host.url=
#   /d:sonar.ws.timeout=
#   /d:sonar.projectBaseDir=
#   /d:sonar.branch.name=
#   /d:sonar.scanner.skipJreProvisioning=
#   /d:sonar.scanner.scanAll=
#   /d:sonar.exclusions=
#   /d:sonar.issue.ignore.multicriteria=exclude `
#   /d:sonar.issue.ignore.multicriteria.exclude.rule=
#   /d:sonar.issue.ignore.multicriteria.e1.resourceKey=

# # Build .NET Project
# dotnet build ${{ inputs.solution-directory }}\${{ inputs.solution-name }} -c Release --no-restore

# # End SonarQube Analysis
# .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.token=${{ inputs.sonar-token }} | Tee-Object -FilePath .\.sonar\sonar-logs.txt
