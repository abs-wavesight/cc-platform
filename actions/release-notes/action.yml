name: Log Release Notes

inputs:
  solution_name:
    description: 'The name of the solution to update or add'
    required: true
    type: string
  version:
    description: 'The new version of the solution'
    required: true
    type: string
  wiki_url_root:
    description: 'The root page under which the environment page will be checked/created'   
    type: string        
    default: "https://dev.azure.com/ABSDigital/Common%20Core/_apis/wiki/wikis/Common-Core.wiki"
  wiki_page:
    description: 'The name of the wiki page to update'
    required: true
    type: string
  environment:
    description: 'The environment (e.g., Development, Production) for which the page will be checked/created'
    required: true
    type: string
  auth_token: 
    description: 'The Azure DevOps Personal Access Token (PAT) for authorization'
    required: true
    type: string

runs:
  using: "composite"
  steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Install curl and jq
      shell: bash
      run: sudo apt-get install -y curl jq

    - name: Prepare Wiki URL
      shell: bash
      id: prepare-wiki-url
      run: |
        WIKI_URL_ROOT="${{ inputs.wiki_url_root }}"
        ROOT_PAGE="${{ inputs.wiki_page }}"
        ENVIRONMENT=$(echo "${{ inputs.environment }}" | sed 's/ /%20/g')
        FILE="wiki_page.html"
        
        WIKI_URL="${WIKI_URL_ROOT}/pages?path=${ROOT_PAGE}/${ENVIRONMENT}&api-version=7.1-preview.1"

        echo "WIKI_URL=$WIKI_URL" >> $GITHUB_ENV
        echo "ENVIRONMENT=$ENVIRONMENT" >> $GITHUB_ENV
        echo "FILE=$FILE" >> $GITHUB_ENV

    # - name: Test Write
    #   shell: bash    
    #   env:
    #     AuthToken: ${{ inputs.auth_token }}
    #     WIKI_URL: ${{ env.WIKI_URL }}        
    #   run: |
    #     RESPONSE_CODE=$(curl -s -o /dev/null -w "%{http_code}" -X PUT \
    #      -H "Authorization: Basic $(echo -n user:$AuthToken | base64)" \
    #      -H "Content-Type: application/json" \
    #      -d '{"content": "Test content"}' \
    #      "https://dev.azure.com/ABSDigital/Common%20Core/_apis/wiki/wikis/Common-Core.wiki/pages?path=/MyTestPage&api-version=7.1-preview.1")

    #     echo "Response Code: $RESPONSE_CODE"

    #     if [ "$RESPONSE_CODE" -ne 200 ] && [ "$RESPONSE_CODE" -ne 201 ]; then
    #       echo "Failed to update the Wiki page. Response code: $RESPONSE_CODE"
    #       exit 1
    #     fi          
               

    - name: Check if environment page exists and create if not 
      shell: bash    
      env:
        AuthToken: ${{ inputs.auth_token }}        
      run: |
        # Check if the environment page exists
        RESPONSE_CODE=$(curl -o /dev/null -s -w "%{http_code}\n" -H "Authorization: Basic $(echo -n :$AuthToken | base64)" "$WIKI_URL")

        if [ "$RESPONSE_CODE" -ne 200 ]; then
          echo "Environment page '${ENVIRONMENT}' does not exist. Creating it."
          # Create a new environment page with a default table
          NEW_PAGE_CONTENT="<h2>${ENVIRONMENT} Environment</h2><table><tr><th>Solution Name</th><th>Version</th></tr></table>"
          JSON_CONTENT=$(jq -n --arg content "$NEW_PAGE_CONTENT" '{content: $content}')

          echo "JSON_CONTENT=$JSON_CONTENT"
          echo "WIKI_URL=$WIKI_URL"

           RESPONSE=$(curl -X PUT \
            -H "Authorization: Basic $(echo -n user:$AuthToken | base64)" \
            -H "Content-Type: application/json" \
            -d "$JSON_CONTENT" \
            "$WIKI_URL")          

          if [ "$RESPONSE_CODE" -ne 200 ]; then
            RESPONSE_CODE="${RESPONSE: -3}"
            RESPONSE_BODY="${RESPONSE%???}"

            echo "Response Code: $RESPONSE_CODE"
            echo "Response Body: $RESPONSE_BODY"
            echo "Failed to update the Wiki page. Response code: $RESPONSE_CODE"
            exit 1
          fi

        else
          echo "Environment page '${ENVIRONMENT}' already exists."
        fi

    - name: Download Wiki page content
      shell: bash
      env:
        AuthToken: ${{ inputs.auth_token }}     
      run: |
      
        echo "Fetching Wiki page content from $WIKI_URL"        

        # Perform the API call and capture the response
        RESPONSE=$(curl -s -H "Authorization: Basic $(echo -n user:$AuthToken | base64)" \
                         -H "Accept: */*" \                         
                         "$WIKI_URL")

        # Output the full response for debugging
        echo "Full API Response:"
        echo "$RESPONSE"

        # Extract the content field using jq
        echo "$RESPONSE" | jq -r '.content' > "$FILE"

        # Check if the content was extracted successfully
        if [ -s "$FILE" ]; then
          echo "$FILE successfully created:"
          cat "$FILE"
        else
          echo "Failed to fetch content or content is empty. Check the API response above for errors."
        fi

    - name: Update or Add Solution in the HTML table
      shell: bash
      run: |
         SOLUTION_NAME="${{ inputs.solution_name }}"
         NEW_VERSION="${{ inputs.version }}"        
         
         echo "SOLUTION_NAME=$SOLUTION_NAME"
         echo "NEW_VERSION=$NEW_VERSION"
         echo "Display File=$FILE"
         cat "$FILE"
     
         # Check if the table exists
         if ! grep -q "<table>" "$FILE"; then
           echo "Table not found, creating a new table."
           echo '<table><tr><th>Solution Name</th><th>Version</th></tr></table>' > "$FILE"
         fi
     
         # Check if the solution already exists in the table
         if grep -q "<td>${SOLUTION_NAME}</td>" "$FILE"; then
           echo "Solution found, updating the version."
           sed -i "/<td>${SOLUTION_NAME}<\/td>/!b;n;s/<td>.*<\/td>/<td>${NEW_VERSION}<\/td>/" "$FILE"
         else
           echo "Solution not found, adding new entry."          
           sed -i "/<\/table>/ i <tr><td>${SOLUTION_NAME}</td><td>${NEW_VERSION}</td></tr>" "$FILE"
         fi

         echo "Display File=$FILE"
         cat "$FILE"


    - name: Update Wiki page content
      shell: bash
      env:
        AuthToken: ${{ inputs.auth_token }}
      run: |
        
        UPDATED_CONTENT=$(<"$FILE")
        JSON_CONTENT=$(jq -n --arg content "$UPDATED_CONTENT" '{content: $content}')
        
        curl -X PUT \
             -H "Authorization: Basic $(echo -n :$AuthToken | base64)" \
             -H "Content-Type: application/json" \
             -d "$JSON_CONTENT" \
             "$WIKI_URL"